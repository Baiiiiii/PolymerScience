name: Update Every 6 Hours

on:
    # 当推送到 main 分支时触发
#  push:
#    branches:
#      - master
  schedule:
    # 使用 cron 表达式定义每6小时触发一次
    - cron: '0 */6 * * *'

  # 手动触发
  workflow_dispatch:  

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出仓库代码
      - name: https://github.com/Baiiiiii/PolymerScience.git
        uses: actions/checkout@master
        
      - name: Get time in Beijing (China)
        run: |
          # 设置时区为上海（北京时间）
          export TZ="Asia/Shanghai"
          # 获取当前时间并格式化
          current_time=$(date "+%Y-%m-%d %H:%M:%S")
          # 时间进行url编码
          url_time=$(echo -n "更新时间为: $current_time" | jq -sRr @uri)
          
          echo "ss://bm9uZTox@0.0.0.0:80#$url_time" > config.txt

      # Step 2: 清空文件
      #- name: clear config
      #  id: clear_config
      #  run: |
      #    # 清空文件
      #    echo "" > config.txt

          # 确认写入的内容
          # cat config.txt

    
    # Step 4: 调用外部 API
      # - name: call subVless
      #   id: api_call_sub_vless
      #   run: |
      #     # 使用 curl 调用外部 API
      #     response2=$(curl -s --location --request GET 'https://sub.443888.xyz/vless' --header 'User-Agent: Apifox/1.0.0 (https://apifox.com)' --header 'Accept: */*' --header 'Host: sub.443888.xyz' --header 'Connection: keep-alive')
          
      #     # 输出 API 的响应数据
      #     echo "sub_vless API Response: $response2"
          
      #     # 解码输入的 base64 字符串
      #     decoded2=$(echo "$response2" | base64 --decode)
      #     # echo "Decoded string: $decoded_string"
          
      #     # 将解析的值存储在 GitHub Actions 的输出变量中
      #     # echo "::set-output name=api_value::$decoded_string"
          
      #      # 将参数写入到文件 (比如 config.txt)
      #     echo "Writing sub_vless to file..."
      #     echo "$decoded2" >> config.txt
      #     # echo "\n" >> config.txt

      #     # 确认写入的内容
      #     # cat config.txt

    # Step 3: 调用外部 API
      - name: call v2rayFree
        id: api_call_v2ray_free
        run: |
          # 使用 curl 调用外部 API
          response1=$(curl -s 'https://raw.githubusercontent.com/aiboboxx/v2rayfree/main/v2')
          
          # 输出 API 的响应数据
          echo "v2ray_free API Response: $response1"
          
          # 解码输入的 base64 字符串
          decoded1=$(echo "$response1" | base64 --decode)
          # echo "Decoded string: $decoded_string"
          
          # 将解析的值存储在 GitHub Actions 的输出变量中
          # echo "::set-output name=api_value::$decoded_string"
          
           # 将参数写入到文件 (比如 config.txt)
          echo "Writing v2ray_free to file..."
          echo "$decoded1" >> config.txt
          # echo "\n" >> config.txt

          # 确认写入的内容
          # cat config.txt

          
    # Step 4: 调用外部 API
      # - name: call mfsn
        # id: api_mfsn
       # run: |
          # 使用 curl 调用外部 API
         # response3=$(curl -s 'https://dy.mfsn.cc/sub/v2ray/6K6i6ZiF')
          
          # 输出 API 的响应数据
         # echo "sub_vless API Response: $response3"
          
          # 解码输入的 base64 字符串
          # decoded3=$(echo "$response3" | base64 --decode)
          # echo "Decoded string: $decoded_string"
          
          # 将解析的值存储在 GitHub Actions 的输出变量中
          # echo "::set-output name=api_value::$decoded_string"
          
           # 将参数写入到文件 (比如 config.txt)
         # echo "Writing mfsn to file..."
         # echo "$decoded3" >> config.txt
          # echo "\n" >> config.txt

          # 确认写入的内容
          # cat config.txt
          
      # Step 5: 使用前一步的返回值
      - name: Use API response
        run: |
          # 打印内容
          cat config.txt
          # 使用之前步骤中保存的返回值
          echo "The value from API is: ${{ steps.api_call.outputs.api_value }}"

      # Step 6: 配置 Git 用户信息
      - name: Set Git config
        run: |
          git config --local user.name "${{secrets.GIT_USER_NAME}}"
          git config --local user.email "${{secrets.GIT_EMAIL}}"

      # Step 7: 提交更改
      - name: Commit changes
        run: |
          # 检查是否有更改
          if [[ $(git status --porcelain) ]]; then
            git add config.txt
            git commit -m "Update config.txt with new subscription info"
          else
            echo "No changes to commit"
          fi

      # Step 8: 推送更改到远程仓库
      - name: Push changes
        run: |
          # git push origin HEAD:master  # 将更改推送到 master 分支
          git push https://${{secrets.GIT_TOKEN}}@github.com/Baiiiiii/PolymerScience.git HEAD:master

